{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","showPersons","switchNameHandler","newName","setState","deletePersonHandler","personIndex","splice","nameChangeHandler","event","target","togglePersonsHandler","doesShow","this","map","index","key","classes","length","push","style","backgroundColor","font","border","padding","cursor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAmBeA,G,YAfF,SAACC,GAEV,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,QACWH,EAAMI,KADjB,cACkCJ,EAAMK,IADxC,KAGA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UCsGtDO,E,2MA5GbC,MAAM,CACFC,QAAQ,CACN,CAACC,GAAG,EAAEV,KAAK,OAAOC,IAAI,IACtB,CAACS,GAAG,EAAEV,KAAK,MAAMC,IAAI,KAEvBU,aAAY,G,EAGhBC,kBAAkB,SAACC,GAEjB,EAAKC,SAAS,CACZL,QAAQ,CACN,CAACT,KAAKa,EAAQZ,IAAI,IAClB,CAACD,KAAK,MAAMC,IAAI,Q,EAKtBc,oBAAoB,SAACC,GAEjB,IAAMP,EAAQ,YAAI,EAAKD,MAAMC,SAC7BA,EAAQQ,OAAOD,EAAY,GAC3B,EAAKF,SAAS,CAACL,QAAQA,K,EAG3BS,kBAAkB,SAACC,GACrB,EAAKL,SAAS,CACRL,QAAQ,CACN,CAACT,KAAK,MAAMC,IAAI,IAChB,CAACD,KAAKmB,EAAMC,OAAOd,MAAML,IAAI,Q,EAKnCoB,qBAAqB,WACnB,IAAMC,EAAS,EAAKd,MAAMG,YAC1B,EAAKG,SAAS,CAACH,aAAaW,K,wEAGnB,IAAD,OAUFb,EAAQ,KACTc,KAAKf,MAAMG,cAEZF,EACE,6BACGc,KAAKf,MAAMC,QAAQe,KAAI,SAAC7B,EAAO8B,GAC9B,OAAM,kBAAC,EAAD,CACI1B,MAAO,kBAAI,EAAKgB,oBAAoBU,IACpCzB,KAAML,EAAOK,KACbC,IAAKN,EAAOM,IACZyB,IAAK/B,EAAOe,UAS9B,IAAMiB,EAAQ,GAUf,OATIJ,KAAKf,MAAMC,QAAQmB,QAAQ,GAE5BD,EAAQE,KAAK,OAEZN,KAAKf,MAAMC,QAAQmB,QAAQ,GAE5BD,EAAQE,KAAK,QAKd,yBAAKhC,UAAU,OACf,0CACA,uBAAGA,UAAW8B,GAAd,0BACA,4BACAG,MA3CiB,CAChBC,gBAAgB,OAChBC,KAAK,UACLC,OAAO,iBACPC,QAAQ,MACRC,OAAO,WAwCPrC,QAASyB,KAAKF,sBAHf,eAgBKZ,O,GApGM2B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1f992f92.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n\r\n\r\nconst person=(props)=>{\r\n    \r\n    return (\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}> \r\n                 i am {props.name} my age is {props.age}. \r\n            </p> \r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n        </div>\r\n    \r\n    )\r\n\r\n};\r\n\r\nexport default person;","import React,{Component} from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\n\nclass App extends Component{\n  state={\n      persons:[\n        {id:1,name:'raju',age:30},\n        {id:2,name:'ram',age:32}\n      ],\n      showPersons:false\n};\n\n  switchNameHandler=(newName)=>{\n    //console.log(\"button was clicked\");\n    this.setState({\n      persons:[\n        {name:newName,age:30},\n        {name:'ram',age:32}\n      ]\n    });\n  };\n\n  deletePersonHandler=(personIndex)=>{\n      //const persons=this.state.persons.slice();\n      const persons=[...this.state.persons]\n      persons.splice(personIndex,1);\n      this.setState({persons:persons});\n  }\n\n  nameChangeHandler=(event)=>{\nthis.setState({\n      persons:[\n        {name:'ram',age:32},\n        {name:event.target.value,age:30}\n      ]\n    });\n  };\n\n  togglePersonsHandler=()=>{\n    const doesShow=this.state.showPersons;\n    this.setState({showPersons:!doesShow});\n  };\n\n    render(){\n\n      const styleButton={\n        backgroundColor:'blue',\n        font:'inherit',\n        border:'1px solid blue',\n        padding:'8px',\n        cursor:'pointer'\n      };\n\n      let persons=null;\n      if(this.state.showPersons)\n      {\n        persons=(\n          <diV>\n            {this.state.persons.map((person,index)=>{\n              return<Person\n                        click={()=>this.deletePersonHandler(index)}\n                        name={person.name}\n                        age={person.age}\n                        key={person.id}/>\n            })}\n          </diV>\n        );\n        //style.backgroundColor='red';\n        \n      }\n\n\n      const classes=[];\n      if(this.state.persons.length<=2)\n      {\n        classes.push('red');\n      }\n      if(this.state.persons.length<=1)\n      {\n        classes.push('bold');\n      }\n\n     return (\n       \n       <div className=\"App\">\n       <h1>Hi Welcome</h1>\n       <p className={classes}>Now change the style! </p>\n       <button\n       style={styleButton}\n        //onClick={this.switchNameHandler.bind(this,'Rahul')}>Switch Name</button>\n        onClick={this.togglePersonsHandler}>Switch Name</button>\n        {/* {\n          this.state.showPersons===true ?\n        <diV>\n          <Person \n            name={this.state.persons[0].name}\n            age={this.state.persons[0].age}/>\n          <Person \n            name={this.state.persons[1].name}\n            age={this.state.persons[1].age}\n            click={this.switchNameHandler.bind(this,'Rahu!')}\n            changed={this.nameChangeHandler}> my Hobbies are playing Football</Person>\n          </diV> :null\n        } */persons}\n       </div>\n       \n     );\n   // return React.createElement('div',{className:'App'},React.createElement('h1',null,'Hi Welcome'))\n  \n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}